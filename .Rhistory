-2 + c(-1,1)* qt(.975,8) * 0.3/sqrt(9)
-2 + c(-1,1)* qt(.975,8) * 2.6/sqrt(9)
-2 + c(-1,1)* qt(.975,8) * 2.1/sqrt(9)
-2 + c(-1,1) * qt(.975,18) * sqrt(((9*0.6^2)+(9*0.68^2))/18) * sqrt(2/10)
sp = sqrt(((10-1)*(0.6^2) + (10-1)*(0.68^2))/(10 + 10 - 2))
sp
3-5 + c(-1,1) * qt(.975, 18) * sp * sqrt(0.1 + 0.1)
6-4 + c(-1,1) * qnorm(.975) * sqrt(0.25/100 + 4/100)
-3-1 + c(-1,1) * qt(.95,16) * sqrt((8*1.5^2 + 8*1.8^2)/16) * sqrt(2/9)
exit
g1 <- c(140, 138, 150, 148, 135)
g1
g2 <- c(132, 135, 151, 146, 130)
g2
t.test(g1, g1, paired = TRUE)
t.test(g1, g2, paired = TRUE)
qt(p = .95)
qt(p = .95, df = 8)
qt(p = .975, df = 8)
1100 + c(-1,1)*qt(.975, 8)*30/sqrt(9)
binom.test(3,4)
binom.test(3,4,alternative = "greater")
binom.test(3,4,alternative = "less")
poisson.test(10,1787,(1/1000),alternative = "less")
poisson.test(10,1787,(1/100),alternative = "less")
sp <- (8*(1.5^2) + 8*(1.8^2))/16
sp
-3-1+c(-1,1)*qt(.975,16)*sp*sqrt(2/9)
t = (-3-1)/sqrt( (1.5^2)/9 + (1.8^2)/9)
t
pt(q = t, df = 16)
pt(q = t, df = 16,lower.tail = FALSE)
mua <- .04
n <- 100
alpha <- .05
sigma <- .04
mua
mua <- 0.01
mua
alpha
z <- qnorm(1-alpha)
power <- pnorm(0+z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
power
power.t.test(power=0.9,delta=0.01,sd=0.04,type="one.sample",alt="one.sided")$n
swirl()
library("swirl")
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z, mean=30, lower.tail = FALSE)
pnorm(30+z, mean=32, lower.tail = FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail = FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues < .05)
sum(p.adjust(pValues, method="bonferroni"))
sum(p.adjust(pValues, method="bonferroni") < .05)
sum(p.adjust(pValues, method="BH") < .05)
tail(trueStatus)
table(pValues2<.05, trueStatus)
24/500
table(p.adjust(pValues2, method="bonferroni")<.05, trueStatus)
table(p.adjust(pValues2, method="BH")<.05, trueStatus)
sum(1:6)/6
print(g2)
head(sh)
length(sh)
nh
median(resampledMedians)
median(sh)
sample(fh, nh*B, replace=TRUE)
sam <- sample(fh, nh*B, replace=TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(.025,.975))
quantile(meds, c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count - Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
rexp(100, 2)
rexp(n=100, rate=2)
rexp(n=100, rate=.2)
rexp(n=40, rate=.2)
knit_with_parameters('~/simulation-exercise.Rmd')
unlink('simulation-exercise_cache', recursive = TRUE)
setwd("~/")
Sys.which('pdflatex')
install.packages('tinytex')
Sys.which('pdflatex')
tinytex::install_tinytex()
tinytex:::is_tinytex()
Sys.which('pdflatex')
pdflatex
Sys.which('pdflatex')
Sys.getenv()
Sys.getenv("RSTUDIO_PANDOC")
tinytex::tinytex_root()
Sys.which('pdflatex')
Sys.which('pdflatex')
unlink('simulation-exercise_cache', recursive = TRUE)
install.packages("pandocfilters")
unlink('simulation-exercise_cache', recursive = TRUE)
n <- 40
lamb <- 0.2
print(paste("Theoretical mean:",1/lamb))
samp <- rexp(n = n, rate = lamb)
print(paste("One-sample mean (n = 40)", mean(samp)))
alpha <- 0.05
ci <- mean(samp) + c(-1,1)*qnorm(1-alpha/2)*(1/lamb)/sqrt(n)
print(ci)
means = NULL
for (i in 1 : 1000) means = c(means, mean(rexp(n = n, rate = lamb)))
hist(means)
abline(v=(1/lamb), col="red", lwd=3, lty=2)
print(paste("Distribution mean:", 1/lamb))
print(paste("Mean of the sample means:", mean(means)))
print(paste("Distribution variance:", 1/lamb^2))
print(paste("Variance of the 1000 sample means:", var(means)))
exponential <- rexp(n=1000, rate=0.2)
hist(exponential)
hist(means)
devtools::session_info('rmarkdown')
install.packages("devtools")
devtools::session_info('rmarkdown')
Sys.which('pdflatex')
Sys.which('xelatex')
n <- 40
lamb <- 0.2
print(paste("Theoretical mean:",1/lamb))
samp <- rexp(n = n, rate = lamb)
print(paste("One-sample mean (n = 40)", mean(samp)))
alpha <- 0.05
ci <- mean(samp) + c(-1,1)*qnorm(1-alpha/2)*(1/lamb)/sqrt(n)
print(ci)
means = NULL
for (i in 1 : 1000) means = c(means, mean(rexp(n = n, rate = lamb)))
hist(means)
abline(v=(1/lamb), col="red", lwd=3, lty=2)
print(paste("Distribution mean:", 1/lamb))
print(paste("Mean of the sample means:", mean(means)))
print(paste("Distribution variance:", 1/lamb^2))
print(paste("Variance of the 1000 sample means:", var(means)))
exponential <- rexp(n=1000, rate=0.2)
hist(exponential)
hist(means)
knit_with_parameters('~/simulation-exercise.Rmd')
unlink('simulation-exercise_cache', recursive = TRUE)
clear
clr
cls
tinytex::parse_packages()
tinytex::parse_packages(log = '*.log')
tinytex::parse_packages(log = 'parse.log')
unlink('simulation-exercise_cache', recursive = TRUE)
data("ToothGrowth")
summary(ToothGrowth)
ToothGrowth[ToothGrowth$len %in% c("OJ","VC")]
ToothGrowth[ToothGrowth$supp %in% c("OJ","VC")]
ToothGrowth
ToothGrowth[ToothGrowth$supp %in% c("OJ","VC"),]
subdata <- ToothGrowth[ToothGrowth$supp %in% c("OJ","VC"),]
subdata$count
subdata$len
ToothGrowth[ToothGrowth$supp %in% c("OJ","VC"),c(len,supp)]
ToothGrowth[ToothGrowth$supp %in% c("OJ","VC"),c("len","supp")]
summary(ToothGrowth)
ToothGrowth[ToothGrowth$dose == c(0.5, 1)]
ToothGrowth[ToothGrowth$dose == c(0.5, 1),]
ToothGrowth[ToothGrowth$dose == c(0.5, 1), c("len","dose")]
abs(-3)
x <- 4
class(x)
class(c(4,TRUE))
rbind(c(1,3,5),c(3,2,10))
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
1:4 + 2
x <- c(3, 5, 1, 10, 12, 6)
x[x<6] == 0
x[x %in% 1:5]
getwd()
data <- read.table("./Python Scripts/coursera-r-programming/Week1/hw1_data.csv")
data <- read.csv("./Python Scripts/coursera-r-programming/Week1/hw1_data.csv")
data.names
attributes(data)
data$names
data[names]
attributes(data)
head(data)
data[,1:2]
data[1:2,]
tail(data, 2)
data[47,]
is.na(data)
sum(is.na(data))
is.na(data["Ozone"])
sum(is.na(data["Ozone"]))
mean(data["Ozone"])
data["Ozone"]
?mean
mean(data["Ozone"], na.rm = TRUE)
mean(data$Ozone, na.rm = TRUE)
data[data$Ozone > 31 & data$Temp > 90]
data[data$Ozone > 31 & data$Temp > 90,]
data[data$Ozone > 31 & data$Temp > 90,]$Solar.R
mean(data[data$Ozone > 31 & data$Temp > 90,]$Solar.R)
mean(data[data$Ozone > 31 & data$Temp > 90,]$Solar.R, na.rm = TRUE)
data[data$Month == 6]
data[data$Month == 6,]
mean(data[data$Month == 6,]$Temp, na.rm=TRUE)
max(data[data$Month == 5,]$Ozone, na.rm=TRUE)
package_version("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir/")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename(from = "mytest.R", to = "mytest2.R")
file.copy(from = "mytest2.R", to = "mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R", "folder1", "folder2")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Matheus")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
quit()
NULL
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(vector)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
add2 <- function(x,y) {
x + y
}
add2(3,5)
above10 <- function(x) {
x[x > 10]
}
above10(1:20)
above <- function(x, n) {
x[x > n]
}
above(1:20, 5)
above <- function(x, n = 10) {
x[x > n]
}
above(1:25)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
airquality
columnmean(airquality)
columnmean(airquality, FALSE)
library("swirl")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("GET", "TO", "WORK!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
skip()
back()
mad_libs(place="SSA", adjective="Pretty", noun="city")
submit()
'I' %p% 'love' %p% 'R!'
cube <- function(x,n) {
x^3
}
cube(3)
x <- 1:10
if (x < 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
source('~/Python Scripts/ProgrammingAssignment2/cachematrix.R')
m <<-NULL
cacheSolve()
cacheSolve([])
cacheSolve(numeric())
getwd()
setwd("./Python Scripts/ProgrammingAssignment2/")
source('~/Python Scripts/ProgrammingAssignment2/cachematrix.R')
setwd("./Python Scripts/ProgrammingAssignment2/")
getwd()
